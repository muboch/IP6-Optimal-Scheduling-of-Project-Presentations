{"version":3,"sources":["serviceWorker.ts","theme.ts","screens/LandingScreen/landingscreen.tsx","screens/CreatePlanningScreen/planningscreen.tsx","screens/ListPlanningScreen/listplanningscreen.tsx","App.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","theme","createMuiTheme","palette","primary","main","contrastText","secondary","light","contrastThreshold","tonalOffset","useGStyles","makeStyles","root","width","height","centerFlexDiv","display","alignContent","justifyContent","alignItems","margin","spacing","columnFlexDiv","flexDirection","primaryButton","color","backgroundColor","padding","background","secondaryButton","borderWidth","borderColor","LandingScreen","styles","useLocation","setLocation","className","Button","onClick","useStyles","input","button","PlanningScreen","gStyles","useState","presentations","undefined","rooms","timeslots","teachers","files","setFiles","getKeyValue","key","uploadFiles","e","a","preventDefault","formData","FormData","Object","entries","value","append","console","log","fetch","process","method","body","res","json","onSubmit","label","map","u","accept","id","type","onChange","mykey","file","target","htmlFor","variant","component","disabled","table","minWidth","maxWidth","ListPlanningScreen","plannings","setPlannings","useEffect","loadData","TableContainer","Paper","Table","aria-label","TableHead","TableRow","TableCell","align","TableBody","p","scope","name","nr","status","href","App","ThemeProvider","path","to","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.530b8e27.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {createMuiTheme, makeStyles} from \"@material-ui/core/styles\";\n\nexport const theme = createMuiTheme({\n  palette: {\n    primary: {\n      // light: will be calculated from palette.primary.main,\n      main: \"#225A33\",\n      // dark: will be calculated from palette.primary.main,\n      contrastText: \"#FFFFFF\"\n      // contrastText: will be calculated to contrast with palette.primary.main\n    },\n    secondary: {\n      light: \"#0066ff\",\n      main: \"#0044ff\",\n      // dark: will be calculated from palette.secondary.main,\n      contrastText: \"#ffcc00\"\n    },\n    // Used by `getContrastText()` to maximize the contrast between\n    // the background and the text.\n    contrastThreshold: 3,\n    // Used by the functions below to shift a color's luminance by approximately\n    // two indexes within its tonal palette.\n    // E.g., shift from Red 500 to Red 300 or Red 700.\n    tonalOffset: 0.2\n  }\n});\n\nexport const useGStyles = makeStyles(theme => ({\n  root: { width: \"100vw\", height: \"100vh\" },\n  centerFlexDiv: {\n    display: \"flex\",\n    alignContent: \"center\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    width: \"100%\",\n    height: \"100%\",\n    \"& > *\": {\n      margin: theme.spacing(1)\n    }\n  },\n  columnFlexDiv: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignContent: \"center\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    width: \"100%\",\n    height: \"100%\",\n    \"& > *\": {\n      margin: theme.spacing(1)\n    }\n  },\n  primaryButton: {\n    color: theme.palette.primary.contrastText,\n    backgroundColor: theme.palette.primary.main,\n    padding: \"4px\",\n    \"&.Mui-disabled\": {\n      background: \"#AAB9AE\",\n    }\n  },\n\n  secondaryButton: {\n    color: theme.palette.primary.main,\n    backgroundColor: theme.palette.primary.contrastText,\n    borderWidth: \"1px\",\n    borderColor: theme.palette.primary.main,\n    padding: \"4px\"\n  }\n}));\n","import React from \"react\";\nimport { Button } from \"@material-ui/core\";\nimport { useGStyles } from \"../../theme\";\nimport { useLocation } from \"wouter\";\n\nconst LandingScreen: React.FC = (): JSX.Element => {\n  const styles = useGStyles();\n  const [location, setLocation] = useLocation();\n\n  return (\n    <div className={styles.centerFlexDiv}>\n      <Button\n        className={styles.primaryButton}\n        onClick={() => {\n          setLocation(\"/createPlanning\");\n        }}\n      >\n        Neue Planung erstellen\n      </Button>\n      <Button\n        className={styles.primaryButton}\n        onClick={() => {\n          setLocation(\"/listPlanning\");\n        }}\n      >\n        Plannungen Anzeigen\n      </Button>\n    </div>\n  );\n};\n\nexport default LandingScreen;\n","import React, { useState, FormEvent } from \"react\";\nimport { Button, makeStyles } from \"@material-ui/core\";\nimport { useGStyles } from \"../../theme\";\nimport CheckCircleOutlineIcon from \"@material-ui/icons/CheckCircleOutline\";\n\nconst useStyles = makeStyles(theme => ({\n  input: {\n    display: \"none\"\n  },\n  button: {\n    width: \"400px\"\n  }\n}));\n\nconst PlanningScreen: React.FC = (): JSX.Element => {\n  const gStyles = useGStyles();\n  const styles = useStyles();\n  const [files, setFiles] = useState<Files>({\n    presentations: undefined,\n    rooms: undefined,\n    timeslots: undefined,\n    teachers: undefined\n  });\n\n  type UploadInfo = {\n    key: keyof Files;\n    label: string;\n  };\n  type Files = {\n    presentations?: File;\n    rooms?: File;\n    timeslots?: File;\n    teachers?: File;\n  };\n\n  const uploadInfos: Array<UploadInfo> = [\n    { key: \"presentations\", label: \"Präsentationen\" },\n    { key: \"rooms\", label: \"Räume\" },\n    { key: \"timeslots\", label: \"Zeitslots\" },\n    { key: \"teachers\", label: \"Lehrpersonen\" }\n  ];\n  const getKeyValue = (key: keyof Files) => {\n    return files[key] !== undefined;\n  };\n\n  const setFileForKey = (mykey: string, file: File) => {\n    setFiles({ ...files, [`${mykey}`]: file });\n  };\n\n  const uploadFiles = async (e: FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    const formData = new FormData();\n    for (const [key, value] of Object.entries(files)) {\n      formData.append(key, value as Blob);\n      console.log(`${key}: ${value}`);\n    }\n\n    try {\n      const res = await fetch(`${process.env.REACT_APP_API_ENDPOINT}/api/plannings`, {\n        // content-type header should not be specified!\n        method: \"POST\",\n        body: formData\n      });\n      const json = await res.json();\n\n    } catch (error) {\n      console.log(\"error\", error);\n      return;\n    }\n    setFiles({});\n  };\n\n  return (\n    <form\n      className={gStyles.columnFlexDiv}\n      onSubmit={(e: FormEvent<HTMLFormElement>) => uploadFiles(e)}\n    >\n      {uploadInfos.map(u => {\n        return (\n          <>\n            <input\n              accept=\".csv\"\n              className={styles.input}\n              id={`${u.key}-file`}\n              type=\"file\"\n              onChange={e => {\n                setFileForKey(u.key, e.target.files![0]);\n              }}\n            />\n            <label htmlFor={`${u.key}-file`}>\n              <Button\n                variant={\"outlined\"}\n                component=\"span\"\n                className={`${gStyles.secondaryButton} ${styles.button}`}\n              >\n                {`${u.label} hochladen`}\n                {getKeyValue(u.key) && (\n                  <CheckCircleOutlineIcon/>\n                )}\n              </Button>\n            </label>\n          </>\n        );\n      })}\n      <Button\n        type=\"submit\"\n        className={`${gStyles.primaryButton} ${styles.button}`}\n        disabled={\n          !getKeyValue(\"presentations\") ||\n          !getKeyValue(\"rooms\") ||\n          !getKeyValue(\"teachers\") ||\n          !getKeyValue(\"timeslots\")\n        }\n      >\n        Planung erstellen\n      </Button>\n    </form>\n  );\n};\n\nexport default PlanningScreen;\n","import React, { useEffect, useState } from \"react\";\nimport {\n  Button,\n  FormControl,\n  InputLabel,\n  Link,\n  MenuItem,\n  Select,\n  Paper,\n  TableContainer,\n  Table,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableBody,\n  makeStyles\n} from \"@material-ui/core\";\nimport { useGStyles } from \"../../theme\";\n\n\ntype Plannings = {\n  nr: string;\n  name: string;\n  id: string;\n  status?: string;\n};\n\nconst useStyles = makeStyles({\n  table: {\n    minWidth: 650,\n    maxWidth: 1000\n  }\n});\n\nconst ListPlanningScreen: React.FC = (): JSX.Element => {\n  const gStyles = useGStyles();\n  const styles = useStyles();\n  const [plannings, setPlannings] = useState<Array<Plannings>>();\n\n  useEffect(() => {\n    const loadData = async () => {\n      const res = await fetch(`${process.env.REACT_APP_API_ENDPOINT}/api/plannings`);\n      const json = await res.json();\n      console.log(json);\n\n      setPlannings(json);\n    };\n    loadData();\n  }, []);\n\n  const downloadFile = async (id: string) => {\n    const res = await fetch(`${process.env.REACT_APP_API_ENDPOINT}/api/plannings/${id}`);\n  };\n\n  return (\n    <div className={gStyles.columnFlexDiv}>\n      <TableContainer component={Paper} className={styles.table}>\n        <Table aria-label=\"simple table\">\n          <TableHead>\n            <TableRow>\n              <TableCell>Name</TableCell>\n              <TableCell align=\"right\">Nummer</TableCell>\n              <TableCell align=\"right\">Status</TableCell>\n              <TableCell align=\"right\">Download</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {plannings &&\n              plannings.map(p => (\n                <TableRow key={p.id}>\n                  <TableCell component=\"th\" scope=\"row\">\n                    {p.name}\n                  </TableCell>\n                  <TableCell align=\"right\">{p.nr}</TableCell>\n                  <TableCell align=\"right\">{p.status}</TableCell>\n                  <TableCell align=\"right\">\n                    <Button\n                      className={gStyles.primaryButton}\n                      target=\"_blank\"\n                      href={`${process.env.REACT_APP_API_ENDPOINT}/api/plannings/${p.id}`}\n                    >\n                      Planung Herunterladen\n                    </Button>\n                  </TableCell>\n                </TableRow>\n              ))}\n          </TableBody>\n        </Table>\n      </TableContainer>\n    </div>\n  );\n};\n\nexport default ListPlanningScreen;\n","import React from \"react\";\nimport { Redirect, Route, Switch } from \"wouter\";\nimport LandingScreen from \"./screens/LandingScreen/landingscreen\";\nimport { ThemeProvider } from \"@material-ui/core\";\nimport { theme, useGStyles } from \"./theme\";\nimport PlanningScreen from \"./screens/CreatePlanningScreen/planningscreen\";\nimport ListPlanningScreen from \"./screens/ListPlanningScreen/listplanningscreen\";\n\nconst App: React.FC = (): JSX.Element => {\n  console.log(\"endpoint\", process.env.REACT_APP_API_ENDPOINT);\n  console.log(\"nodeenv\", process.env.NODE_ENV);\n\n  const styles = useGStyles();\n  return (\n    <div className={styles.root}>\n      <ThemeProvider theme={theme}>\n        <Switch>\n          <Route path=\"/\" component={LandingScreen} />\n          <Route path=\"/createPlanning\" component={PlanningScreen} />\n          <Route path=\"/listPlanning\" component={ListPlanningScreen} />\n          <Route\n            path=\"/:rest*\"\n            component={() => <Redirect to=\"/\"></Redirect>}\n          ></Route>\n        </Switch>\n      </ThemeProvider>\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}